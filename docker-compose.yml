services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=iago
      - POSTGRES_USER=iago
      - POSTGRES_DB=Projeto
    ports:
      - "5432:5432"
    volumes:
      - ./infra/db/boot.sql:/docker-entrypoint-initdb.d/boot.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iago -d Projeto"]
      interval: 30s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 2GB

    networks:
      - application

  servergolang1: &servergolang
    build:
      context: ./server
    container_name: servergolang1
    restart: unless-stopped
    ports:
      - "4243:4242"
    environment:
      - DATABASE_URL=postgresql://iago:iago@postgres:5432/Projeto
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      - rabbitmq
      - postgres
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1GB
    networks:
      - application

  servergolang2:
    <<: *servergolang
    container_name: servergolang2
    restart: unless-stopped
    ports:
      - "4244:4242"
    environment:
      - DATABASE_URL=postgresql://iago:iago@postgres:5432/Projeto
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672
    depends_on:
      - rabbitmq
      - postgres
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1GB
    networks:
      - application

  nginx:
    image: nginx:1.27
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - servergolang1
      - servergolang2
    networks:
      - application

  rabbitmq:
    image: rabbitmq:3.13.3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - ./infra/rabbitmq-data:/var/lib/rabbitmq
    networks:
      - application
      - monitoring

  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      INFLUXDB_DB: k6
      INFLUXDB_ADMIN_USER: admin
      INFLUXDB_ADMIN_PASSWORD: admin
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    user: root
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - influxdb
      - prometheus
    volumes:
      - ./infra/monitoring/grafana-data:/var/lib/grafana
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - monitoring

volumes:
  grafana-data:

networks:
  application:
  monitoring:
